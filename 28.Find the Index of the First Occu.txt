28.Find the Index of the First Occurrence in a String
Explaination:

This Python code defines a class `Solution` with a method `strStr` that implements the Knuth-Morris-Pratt (KMP) algorithm to find the index of the first occurrence of the `needle` string within the `haystack` string. If the `needle` is not found in the `haystack`, it returns -1.

Here's how the code works:

1. It initializes the `lps` list (Longest Prefix which is also Suffix) of length `len(needle)` with all elements set to 0. This list will store the length of the longest proper prefix which is also a proper suffix for each index in the `needle` string.

2. It iterates through each character of the `needle` string starting from index 1:
   - Inside the loop, it updates the `pre` variable to represent the length of the longest proper prefix which is also a proper suffix for the substring `needle[:i+1]`.
   - It uses the `pre` value to update the corresponding index `i` in the `lps` list.

3. It initializes the variable `n` to 0, which represents the current index in the `needle` string that is being compared.

4. It iterates through each character `h` in the `haystack` string:
   - Inside the loop, it compares the current character of `haystack` with the character at index `n` in the `needle`.
   - If they match, it increments `n`.
   - If `n` becomes equal to the length of `needle`, it means a match is found, and it returns the starting index of the match in the `haystack`.
   - If the characters don't match and `n` is greater than 0, it updates `n` using the value from the `lps` list to skip matching the characters already matched earlier.

5. If no match is found, it returns -1.

The Knuth-Morris-Pratt algorithm efficiently searches for occurrences of a substring within a string in O(n + m) time complexity, where n is the length of the `haystack` string and m is the length of the `needle` string. It achieves this by avoiding unnecessary backtracking during the search process, thanks to the information stored in the `lps` list.

Solution:

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        lps = [0] * len(needle)

        pre = 0 
        for i in range(1, len(needle)):
            while pre > 0 and needle[i] != needle[pre]:
                pre = lps[pre - 1]
            if needle[pre] == needle[i]:
                pre += 1
                lps[i] = pre

        n = 0
        for h in range(len(haystack)):
            while n > 0 and needle[n] != haystack[h]:
                 n = lps[n-1]
            if needle[n] == haystack[h]:
                 n += 1
            if n == len(needle):
                return h - n + 1

        return -1

        