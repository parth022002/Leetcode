35.Search Insert Position
Explanation:

Sure, let's break down the code step by step:

1. **Function Definition:**
   - The function `searchInsert` is defined within the class `Solution`.
   - It takes two parameters: `nums`, a list of integers, and `target`, the integer value to be searched or inserted into the list.
   - It returns an integer, which is the index where the target should be inserted into the list if it's not already present.

2. **Initialization:**
   - `left` is initialized to `0`, representing the left boundary of the search range.
   - `right` is initialized to `len(nums) - 1`, representing the right boundary of the search range, which is the last index of the list.

3. **Binary Search:**
   - The code enters a `while` loop that continues as long as `left` is less than or equal to `right`. This ensures that the search range is valid.
   - Inside the loop, it calculates the `mid` index using binary search.
   - If the element at the `mid` index is equal to the `target`, it means the target is found, and the function returns the index `mid`.
   - If the element at the `mid` index is less than the `target`, it means the `target` lies to the right of `mid`, so it updates `left = mid + 1` to search in the right half of the remaining array.
   - If the element at the `mid` index is greater than the `target`, it means the `target` lies to the left of `mid`, so it updates `right = mid - 1` to search in the left half of the remaining array.

4. **Insertion Index:**
   - If the loop terminates without finding the target (`left > right`), it means the target is not present in the list. At this point, `left` indicates the index where the target should be inserted.
   - The function returns `left` as the insertion index.

5. **Return:**
   - The function returns the insertion index of the target in the sorted list `nums`.

Overall, this function implements the binary search algorithm to efficiently find the insertion index of a target element in a sorted list. If the target is already present in the list, it returns its index; otherwise, it returns the index where the target should be inserted to maintain the sorted order.

Solution:

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left = 0 
        right = len(nums) - 1

        while left <= right:
            mid = left + (right - left) // 2

            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid -1

        return left