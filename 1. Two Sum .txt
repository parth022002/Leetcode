1. Two Sum 

Explaintion:

This code is a Python implementation of the "Two Sum" problem, where you're given an array of integers nums and a target integer target. The task is to find two numbers in the array that sum up to the target and return their indices.

Here's a breakdown of how the code works:

prevMap = {}: This initializes an empty dictionary called prevMap. This dictionary will be used to store previously encountered numbers and their indices.

The code then iterates through the nums list using enumerate(), which gives both the index i and the value n at each iteration.

For each number n in the list, it calculates the difference diff = target - n, which represents the value that must be found in the array to make the sum equal to the target.

It then checks if this difference (diff) exists in the prevMap. If it does, it means that the current number and the number corresponding to diff can be summed up to the target. In this case, it returns the indices of the two numbers ([prevMap[diff], i]), where prevMap[diff] is the index of the number corresponding to diff, and i is the current index.

If the difference is not found in prevMap, it means the current number hasn't been encountered before in such a way that it contributes to the target sum. So, it adds the current number n to prevMap with its index i.

If no solution is found by the end of the loop, it returns None.

This algorithm has a time complexity of O(n) since it iterates through the list of numbers once, and the lookup operation in the dictionary (prevMap) is constant time on average.

Soltuion : 

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        prevMap = {}

        for i, n in enumerate(nums):
            diff = target - n
            if diff in prevMap:
                return [prevMap[diff], i ]
            prevMap[n] = i
        return