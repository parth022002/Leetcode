37. Sudoku Solver
Explaination:

This Python code defines a class `Solution` with a method `solveSudoku` that attempts to solve a given Sudoku puzzle by modifying the input `board` in-place.

Here's how the method works:

1. It initializes three lists `rows`, `cols`, and `squares`, each containing sets to keep track of the numbers seen in each row, column, and 3x3 subgrid, respectively.
2. It iterates through each cell of the Sudoku board. For each non-empty cell, it adds the number to the corresponding sets in `rows`, `cols`, and `squares`.
3. It defines a nested function `backTrack(i, j)` that performs backtracking to solve the Sudoku puzzle. `i` and `j` represent the row and column indices of the current cell being considered.
4. Inside the `backTrack` function:
   - It checks if `i` has reached 9, indicating that all rows have been filled, and sets the `solved` flag to `True` if so.
   - It computes the indices of the next cell to be considered (`new_i` and `new_j`) based on the current indices.
   - If the current cell is already filled (`board[i][j] != '.'`), it moves to the next cell.
   - If the current cell is empty, it tries to fill it with numbers from 1 to 9:
     - It computes the subgrid ID (`box_id`) based on the current cell indices.
     - If the number is not present in the current row, column, or subgrid, it adds the number to the sets, updates the `board` with the number, and proceeds to the next cell (`backTrack(new_i, new_j)`).
     - If the number is not valid (i.e., it is already present in the current row, column, or subgrid), it backtracks by removing the number from the sets and resetting the cell to `'.'`.
5. After defining the `backTrack` function, it initializes the `solved` flag to `False` and calls the `backTrack` function to solve the Sudoku puzzle starting from the top-left cell (`backTrack(0, 0)`).

This algorithm uses backtracking to systematically explore possible solutions for the Sudoku puzzle, trying different numbers for empty cells until a valid solution is found. If a solution is found, the `solved` flag is set to `True`, and the method terminates.

Solution:

class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        rows = [set() for _ in range(9)]
        cols = [set() for _ in range(9)]
        squares = [set() for _ in range(9)]

        for i in range(9):
            for j in range(9):
                if board[i][j] != '.':
                    num = int(board[i][j])
                    rows[i].add(num)
                    cols[j].add(num)

                    box_id = i // 3 * 3 + j // 3
                    squares[box_id].add(num)

        def backTrack(i , j):
            nonlocal solved
            if i == 9 :
                solved = True
                return 

            new_i = i + (j + 1) // 9
            new_j = (j + 1) % 9

            if board[i][j] != '.':
                backTrack(new_i, new_j)
            else:
                for num in range(1, 10):
                    box_id = i // 3 * 3 + j // 3
                    if num not in rows[i] and num not in cols[j] and num not in squares[box_id]:
                        rows[i].add(num)
                        cols[j].add(num)
                        squares[box_id].add(num)
                        board[i][j] = str(num)

                        backTrack(new_i, new_j)
                       
                        if not solved:
                            rows[i].remove(num)
                            cols[j].remove(num)
                            squares[box_id].remove(num)
                            board[i][j] = '.'

        solved = False

        backTrack(0, 0)
        