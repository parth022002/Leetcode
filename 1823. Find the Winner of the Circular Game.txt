1823. Find the Winner of the Circular Game
Solution:

class Solution:
    def findTheWinner(self, n: int, k: int) -> int:
        def josephus(n: int, k: int) -> int:
            if n == 1:
                return 0
            else:
                return (josephus(n - 1, k) + k) % n

        # Convert 0-indexed result to 1-indexed
        return josephus(n, k) + 1


Explanation:

Sure! Here's an explanation of the steps in the recursive solution to the Josephus problem:

### Code

```python
class Solution:
    def findTheWinner(self, n: int, k: int) -> int:
        def josephus(n: int, k: int) -> int:
            if n == 1:
                return 0
            else:
                return (josephus(n - 1, k) + k) % n

        # Convert 0-indexed result to 1-indexed
        return josephus(n, k) + 1
```

### Explanation

1. **Class Definition**: 
    - We define a class `Solution` that contains the method `findTheWinner`.

2. **findTheWinner Method**:
    - This is the main method that takes two arguments: `n` (the number of people) and `k` (the step count).

3. **josephus Method**:
    - Inside the `findTheWinner` method, we define a helper function `josephus` that performs the recursive calculation.
    - This function calculates the position of the winner for a given number of people (`n`) and a step count (`k`).

4. **Base Case**:
    - The base case of the recursion is `if n == 1`. When there is only one person, they are the winner, so the function returns `0`. This `0` represents the position of the winner in a 0-indexed format.

5. **Recursive Case**:
    - For `n > 1`, the function calls itself with `n - 1` (one fewer person) and the same step count `k`.
    - The recursive call computes the position of the winner for `n - 1` people. We then adjust this position by adding `k` (the step count) and taking the modulo `n` to wrap around within the current number of people.

6. **Return Statement**:
    - After the recursive `josephus` function computes the position in a 0-indexed format, we convert this to a 1-indexed format by adding 1.
    - The `findTheWinner` method returns this 1-indexed position as the final result.

### Example Walkthrough

Let's walk through an example to see how this works.

**Example**: `findTheWinner(5, 3)`

1. **Initial Call**: `findTheWinner(5, 3)` is called.
2. **Recursive Calls**:
    - `josephus(5, 3)` calls `josephus(4, 3)`.
    - `josephus(4, 3)` calls `josephus(3, 3)`.
    - `josephus(3, 3)` calls `josephus(2, 3)`.
    - `josephus(2, 3)` calls `josephus(1, 3)`.
3. **Base Case**: `josephus(1, 3)` returns `0`.
4. **Backtracking**:
    - `josephus(2, 3)` returns `(0 + 3) % 2 = 1`.
    - `josephus(3, 3)` returns `(1 + 3) % 3 = 1`.
    - `josephus(4, 3)` returns `(1 + 3) % 4 = 0`.
    - `josephus(5, 3)` returns `(0 + 3) % 5 = 3`.
5. **Convert to 1-Indexed**:
    - `findTheWinner(5, 3)` returns `3 + 1 = 4`.

So, the winner's position is `4` when there are `5` people and every third person is eliminated.

This approach provides a clear and systematic way to understand how the Josephus problem is solved using recursion.