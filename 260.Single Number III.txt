260.Single Number III
Explanation:

The provided code aims to find the elements in a list of integers that appear exactly once. Here's a detailed step-by-step explanation of how the code works:

### Function Signature
```python
def singleNumber(self, nums: list[int]) -> list[int]:
```
- This function `singleNumber` takes a list of integers `nums` as input and returns a list of integers that appear exactly once in the input list.

### Step-by-Step Explanation

1. **Importing defaultdict**
    ```python
    from collections import defaultdict
    ```
    - The `defaultdict` is imported from the `collections` module. `defaultdict` is a subclass of the built-in `dict` class that returns a default value if the key is not found.

2. **Initializing the Frequency Dictionary**
    ```python
    freq = defaultdict(int)  # number -> appear_number
    ```
    - A `defaultdict` named `freq` is created with `int` as the default factory. This means that if a key is not found in `freq`, it will return `0` by default. The `freq` dictionary will be used to count the frequency of each number in the `nums` list.

3. **Counting Frequencies**
    ```python
    for n in nums:
        freq[n] += 1
    ```
    - The code iterates over each number `n` in the input list `nums`.
    - For each number `n`, the corresponding value in the `freq` dictionary is incremented by 1. This loop effectively counts how many times each number appears in the list.

4. **Finding Numbers That Appear Once**
    ```python
    res: list[int] = []
    for num, f in freq.items():
        if f == 1:
            res.append(num)
    ```
    - An empty list `res` is initialized to store the result.
    - The code iterates over the items (key-value pairs) in the `freq` dictionary.
    - For each pair `(num, f)`, where `num` is a number and `f` is its frequency, the code checks if `f` is equal to `1`.
    - If the frequency `f` is `1`, it means that the number `num` appears exactly once in the input list, and `num` is appended to the result list `res`.

5. **Returning the Result**
    ```python
    return res
    ```
    - Finally, the function returns the list `res` containing all the numbers that appear exactly once in the input list `nums`.

### Example
Let's consider an example to illustrate the function's behavior:
```python
nums = [4, 3, 2, 7, 8, 2, 3, 1]
solution = Solution()
print(solution.singleNumber(nums))
```

- After counting frequencies, `freq` would look like this:
  ```python
  {4: 1, 3: 2, 2: 2, 7: 1, 8: 1, 1: 1}
  ```
- The numbers that appear exactly once are `4`, `7`, `8`, and `1`.
- Therefore, the function will return:
  ```python
  [4, 7, 8, 1]
  ```

### Summary
The `singleNumber` function efficiently identifies and returns the elements in the input list that appear exactly once by using a frequency dictionary to count occurrences and then filtering out the elements with a frequency of one.

Solution:

class Solution:
    def singleNumber(self, nums: list[int]) -> list[int]:
        freq = defaultdict(int)  # number -> appear_number
        for n in nums:
            freq[n] += 1

        res: list[int] = []
        for num, f in freq.items():
            if f == 1:
                res.append(num)

        return res