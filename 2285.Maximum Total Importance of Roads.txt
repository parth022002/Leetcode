2285.Maximum Total Importance of Roads
Explanation:

### Code Explanation

#### 1. Initialization
```python
res = 0
cost = 1
conn = [0] * n
```
- `res`: This variable will store the final result, which is the maximum importance.
- `cost`: This variable represents the current importance value to be assigned to a city.
- `conn`: This list keeps track of the number of connections (roads) each city has.

#### 2. Counting Connections
```python
for road in roads:
    conn[road[0]] += 1
    conn[road[1]] += 1
```
- This loop iterates over each road in the `roads` list.
- For each road, it increments the connection count for both cities connected by that road.

#### 3. Sorting Connections
```python
conn.sort()
```
- This sorts the `conn` list in ascending order. This is done to assign the lowest importance to the cities with the fewest connections and the highest importance to the cities with the most connections.

#### 4. Calculating Importance
```python
for con in conn:
    res += con * cost
    cost += 1
```
- This loop iterates over the sorted `conn` list.
- For each city (represented by `con`), it calculates its importance by multiplying the number of connections (`con`) by the current importance value (`cost`).
- It adds this calculated value to `res`.
- It then increments `cost` to assign the next higher importance value to the next city.

#### 5. Returning Result
```python
return res
```
- Finally, the function returns `res`, which contains the sum of the maximum importance values for all cities.

### Example
Consider an example with `n = 5` and `roads = [[0, 1], [0, 2], [1, 2], [1, 3], [3, 4]]`:

1. **Initial Setup:**
   ```python
   res = 0
   cost = 1
   conn = [0, 0, 0, 0, 0]
   ```
2. **Counting Connections:**
   After processing all roads:
   ```python
   conn = [2, 3, 2, 2, 1]
   ```
3. **Sorting Connections:**
   ```python
   conn.sort()
   conn = [1, 2, 2, 2, 3]
   ```
4. **Calculating Importance:**
   - For the city with 1 connection: `res += 1 * 1 = 1`, `cost = 2`
   - For the city with 2 connections: `res += 2 * 2 = 4`, `cost = 3`
   - For the next city with 2 connections: `res += 2 * 3 = 6`, `cost = 4`
   - For the next city with 2 connections: `res += 2 * 4 = 8`, `cost = 5`
   - For the city with 3 connections: `res += 3 * 5 = 15`

   So, the final `res` is `1 + 4 + 6 + 8 + 15 = 34`.

Therefore, the function would return `34` as the maximum importance.

Solution:

class Solution:
    def maximumImportance(self, n: int, roads: List[List[int]]) -> int:
        res = 0
        cost = 1
        conn = [0] * n
        for road in roads:
            conn[road[0]] += 1
            conn[road[1]] += 1

        conn.sort()
        for con in conn:
            res += con * cost
            cost += 1
        return res
