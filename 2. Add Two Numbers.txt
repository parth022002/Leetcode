2. Add Two Numbers

Explaination:

This Python code defines a class `Solution` with a method `addTwoNumbers` that adds two numbers represented as linked lists. Each node of the linked list represents a single digit of the number, with the digits stored in reverse order.

Here's a breakdown of how the code works:

1. `ListNode` is a class representing a node of the singly-linked list. Each node has two attributes: `val`, which stores the value of the digit, and `next`, which points to the next node in the list.

2. Inside the `addTwoNumbers` method:
   - It initializes a dummy node `waste` to keep track of the head of the result linked list.
   - It initializes a variable `cur` to point to the dummy node.
   - It initializes a variable `carry` to store the carry-over from adding digits.
   
3. It enters a loop that iterates until both input linked lists `l1` and `l2` are exhausted and there's no carry-over.
   
4. In each iteration:
   - It retrieves the values of the current nodes `l1` and `l2`, or 0 if they are `None`.
   - It calculates the sum of the values of the current nodes and the carry-over.
   - It updates the carry-over for the next iteration.
   - It calculates the value to be stored in the current node of the result linked list.
   - It creates a new node with the calculated value and appends it to the result linked list.
   - It advances the `cur` pointer to the newly added node.
   - It advances `l1` and `l2` pointers to the next nodes if they are not `None`.
   
5. After the loop, it returns the next node of the dummy node `waste`, which effectively returns the head of the result linked list.

This code efficiently adds two numbers represented as linked lists in reverse order and returns the result as a new linked list. It has a time complexity of O(max(n, m)), where n and m are the lengths of the input linked lists `l1` and `l2`, respectively, as it iterates through both lists once.

Sotuion:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
            waste = ListNode()
            cur = waste

            carry = 0
            while l1 or l2 or carry:
                v1 = l1.val if l1 else 0
                v2 = l2.val if l2 else 0

                val = v1 + v2 + carry

                carry = val // 10
                val = val % 10

                cur.next = ListNode(val)

                cur = cur.next
                l1 = l1.next if l1 else None
                l2 = l2.next if l2 else None

            return waste.next       