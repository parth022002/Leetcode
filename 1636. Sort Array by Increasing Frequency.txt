1636. Sort Array by Increasing Frequency
Solution:

class Solution:
    def frequencySort(self, nums: List[int]) -> List[int]:
        freq = Counter(nums)
        nums.sort(key=lambda x: (freq[x], -x))        
        return nums

Explanation:
Certainly! Let's break down the steps of the `frequencySort` method in detail:

### Code:

```python
from collections import Counter
from typing import List

class Solution:
    def frequencySort(self, nums: List[int]) -> List[int]:
        # Step 1: Count the frequency of each number
        freq = Counter(nums)
        
        # Step 2: Sort the list based on frequency and then by value in descending order
        nums.sort(key=lambda x: (freq[x], -x))
        
        # Step 3: Return the sorted list
        return nums
```

### Step-by-Step Explanation:

1. **Import Necessary Modules:**
    ```python
    from collections import Counter
    from typing import List
    ```
    - `Counter` from the `collections` module is used to count the frequency of elements in the list.
    - `List` from the `typing` module is used for type hinting to indicate that `nums` is a list of integers.

2. **Define the Class and Method:**
    ```python
    class Solution:
        def frequencySort(self, nums: List[int]) -> List[int]:
    ```
    - A class `Solution` is defined with a method `frequencySort` that takes a list of integers (`nums`) and returns a list of integers.

3. **Count the Frequency of Each Number:**
    ```python
    freq = Counter(nums)
    ```
    - `Counter(nums)` creates a dictionary-like object where keys are the elements from `nums` and values are their respective counts (frequencies).
    - For example, if `nums` is `[1, 1, 2, 2, 2, 3]`, then `freq` would be `Counter({2: 3, 1: 2, 3: 1})`.

4. **Sort the List:**
    ```python
    nums.sort(key=lambda x: (freq[x], -x))
    ```
    - The `sort` method sorts the list `nums` in place.
    - The `key` parameter specifies a function to be called on each list element before making comparisons.
    - The lambda function `lambda x: (freq[x], -x)` returns a tuple `(freq[x], -x)` for each element `x` in `nums`.
        - `freq[x]` gives the frequency of `x`.
        - `-x` ensures that elements with the same frequency are sorted in descending order.
    - This sorting ensures that elements with lower frequency appear first. If two elements have the same frequency, the larger element comes first.
    - For example, if `nums` is `[1, 1, 2, 2, 2, 3]`, after sorting, it would be `[3, 1, 1, 2, 2, 2]`.

5. **Return the Sorted List:**
    ```python
    return nums
    ```
    - Finally, the sorted list is returned.

### Example Walkthrough:

Suppose `nums = [1, 1, 2, 2, 2, 3]`:
1. **Frequency Counting:**
    - `freq = Counter(nums)` results in `freq = Counter({2: 3, 1: 2, 3: 1})`.
2. **Sorting:**
    - The `sort` method sorts `nums` using the key function:
        - For `1`: `freq[1]` is `2`, so the key is `(2, -1)`.
        - For `2`: `freq[2]` is `3`, so the key is `(3, -2)`.
        - For `3`: `freq[3]` is `1`, so the key is `(1, -3)`.
    - Sorting by these keys: `(1, -3)`, `(2, -1)`, `(2, -1)`, `(3, -2)`, `(3, -2)`, `(3, -2)` results in `nums = [3, 1, 1, 2, 2, 2]`.

This method ensures that the list is sorted by frequency and, within the same frequency, by descending order of values.