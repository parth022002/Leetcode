1122.Relative Sort Array
Explanation:

Certainly! Let's break down the code step-by-step to understand how it works:

### Code Explanation

```python
from typing import List
from collections import Counter

class Solution:
    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:
        # Count the occurrences of each element in arr1
        count = Counter(arr1)
        
        # Result array to store the relative sorted elements
        result = []
        
        # Add elements from arr2 in the specified order
        for num in arr2:
            result.extend([num] * count[num])
            del count[num]  # Remove the element from the count dictionary
        
        # Add remaining elements that were not in arr2, in ascending order
        for num in sorted(count):
            result.extend([num] * count[num])
        
        return result
```

### Step-by-Step Breakdown

1. **Import Statements**:
   ```python
   from typing import List
   from collections import Counter
   ```
   - `List` is imported from the `typing` module for type annotations.
   - `Counter` is imported from the `collections` module to count the occurrences of each element efficiently.

2. **Class and Method Definition**:
   ```python
   class Solution:
       def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:
   ```
   - A class `Solution` is defined with a method `relativeSortArray` that takes two lists of integers, `arr1` and `arr2`, and returns a sorted list.

3. **Counting Elements in `arr1`**:
   ```python
   count = Counter(arr1)
   ```
   - `Counter(arr1)` creates a dictionary-like object where keys are the elements of `arr1` and values are the counts of each element. For example, if `arr1 = [2, 3, 1, 3, 2]`, `count` would be `Counter({2: 2, 3: 2, 1: 1})`.

4. **Initializing the Result List**:
   ```python
   result = []
   ```
   - An empty list `result` is initialized to store the final sorted elements.

5. **Adding Elements from `arr2` in Order**:
   ```python
   for num in arr2:
       result.extend([num] * count[num])
       del count[num]  # Remove the element from the count dictionary
   ```
   - For each element `num` in `arr2`:
     - `result.extend([num] * count[num])` adds `num` to the `result` list `count[num]` times.
     - `del count[num]` removes `num` from the `count` dictionary to ensure it is not added again later.
   - This ensures elements appear in the order specified by `arr2`.

6. **Adding Remaining Elements Not in `arr2`**:
   ```python
   for num in sorted(count):
       result.extend([num] * count[num])
   ```
   - `sorted(count)` returns the remaining keys (elements not in `arr2`) in ascending order.
   - For each remaining element `num`, `result.extend([num] * count[num])` adds `num` to the `result` list `count[num]` times.

7. **Returning the Result**:
   ```python
   return result
   ```
   - The method returns the `result` list, which contains elements from `arr1` sorted as per the order specified by `arr2` first, followed by the remaining elements in ascending order.

### Example

Let's go through an example with `arr1 = [2, 3, 1, 3, 2, 4, 6, 7, 9, 2, 19]` and `arr2 = [2, 1, 4, 3, 9, 6]`.

- After counting elements in `arr1`, `count = Counter({2: 3, 3: 2, 1: 1, 4: 1, 6: 1, 7: 1, 9: 1, 19: 1})`.
- Adding elements from `arr2`:
  - For `2`: `result = [2, 2, 2]`, `count` updated to `Counter({3: 2, 1: 1, 4: 1, 6: 1, 7: 1, 9: 1, 19: 1})`.
  - For `1`: `result = [2, 2, 2, 1]`, `count` updated to `Counter({3: 2, 4: 1, 6: 1, 7: 1, 9: 1, 19: 1})`.
  - For `4`: `result = [2, 2, 2, 1, 4]`, `count` updated to `Counter({3: 2, 6: 1, 7: 1, 9: 1, 19: 1})`.
  - For `3`: `result = [2, 2, 2, 1, 4, 3, 3]`, `count` updated to `Counter({6: 1, 7: 1, 9: 1, 19: 1})`.
  - For `9`: `result = [2, 2, 2, 1, 4, 3, 3, 9]`, `count` updated to `Counter({6: 1, 7: 1, 19: 1})`.
  - For `6`: `result = [2, 2, 2, 1, 4, 3, 3, 9, 6]`, `count` updated to `Counter({7: 1, 19: 1})`.
- Adding remaining elements in ascending order:
  - For `7`: `result = [2, 2, 2, 1, 4, 3, 3, 9, 6, 7]`.
  - For `19`: `result = [2, 2, 2, 1, 4, 3, 3, 9, 6, 7, 19]`.

The final sorted array is `[2, 2, 2, 1, 4, 3, 3, 9, 6, 7, 19]`.

Solution:

class Solution:
    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:
        # Count the occurrences of each element in arr1
        count = Counter(arr1)
        
        # Result array to store the relative sorted elements
        result = []
        
        # Add elements from arr2 in the specified order
        for num in arr2:
            result.extend([num] * count[num])
            del count[num]  # Remove the element from the count dictionary
        
        # Add remaining elements that were not in arr2, in ascending order
        for num in sorted(count):
            result.extend([num] * count[num])
        
        return result
