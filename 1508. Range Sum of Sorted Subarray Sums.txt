1508. Range Sum of Sorted Subarray Sums
Solution:

class Solution:
    def rangeSum(self, nums: List[int], n: int, left: int, right: int) -> int:
        MOD = 10**9 + 7
        
        # Step 1: Compute all non-empty continuous subarray sums
        subarray_sums = []
        for i in range(n):
            current_sum = 0
            for j in range(i, n):
                current_sum += nums[j]
                subarray_sums.append(current_sum)
        
        # Step 2: Sort these sums in non-decreasing order
        subarray_sums.sort()
        
        # Step 3: Calculate the sum from index left to right
        result_sum = sum(subarray_sums[left-1:right]) % MOD
        
        # Step 4: Return the result modulo 10^9 + 7
        return result_sum

Explanation:

Let's go through the provided solution step-by-step, explaining each part in detail:

### Step-by-Step Explanation:

1. **Initialization**:
   - We define `MOD` as \(10^9 + 7\). This will be used to ensure that our result is within the limits specified by the problem (i.e., we need to return the result modulo \(10^9 + 7\)).

    ```python
    MOD = 10**9 + 7
    ```

2. **Compute all non-empty continuous subarray sums**:
   - We initialize an empty list `subarray_sums` to store the sums of all possible subarrays.
   - We use a nested loop to generate all subarrays. The outer loop iterates over each possible starting index `i` of the subarray, and the inner loop iterates over each possible ending index `j` starting from `i`.
   - Inside the inner loop, we maintain a running sum `current_sum` that adds the current element `nums[j]` to the sum of the subarray starting at index `i` and ending at `j`. We then append this `current_sum` to the `subarray_sums` list.

    ```python
    subarray_sums = []
    for i in range(n):
        current_sum = 0
        for j in range(i, n):
            current_sum += nums[j]
            subarray_sums.append(current_sum)
    ```

    For example, for `nums = [1, 2, 3, 4]`:
    - Starting at index `0`, the sums of subarrays are: `[1, 3, 6, 10]`.
    - Starting at index `1`, the sums are: `[2, 5, 9]`.
    - Starting at index `2`, the sums are: `[3, 7]`.
    - Starting at index `3`, the sums are: `[4]`.

3. **Sort these sums in non-decreasing order**:
   - After computing all the subarray sums, we sort the `subarray_sums` list to get them in non-decreasing order.

    ```python
    subarray_sums.sort()
    ```

    For our example, the sorted subarray sums will be: `[1, 2, 3, 3, 4, 5, 6, 7, 9, 10]`.

4. **Calculate the sum from index `left` to `right`**:
   - We need to find the sum of elements from index `left` to `right` (1-based indices) in the sorted list. Since Python uses 0-based indexing, we adjust by subtracting 1 from `left` and using `right` directly.
   - We then sum the specified range and take the result modulo \(10^9 + 7\) to ensure the result fits within the required limits.

    ```python
    result_sum = sum(subarray_sums[left-1:right]) % MOD
    ```

    For example, if `left = 1` and `right = 5`, we sum the first 5 elements of the sorted list: `1 + 2 + 3 + 3 + 4 = 13`.

5. **Return the result modulo \(10^9 + 7\)**:
   - Finally, we return the result of the sum modulo \(10^9 + 7\).

    ```python
    return result_sum
    ```

### Summary:
- **Time Complexity**: The time complexity is dominated by the nested loop generating subarray sums \(O(n^2)\) and the sorting step \(O(n^2 \log(n^2))\).
- **Space Complexity**: The space complexity is \(O(n^2)\) due to the storage of all subarray sums.

### Complete Code:
```python
from typing import List

class Solution:
    def rangeSum(self, nums: List[int], n: int, left: int, right: int) -> int:
        MOD = 10**9 + 7
        
        # Step 1: Compute all non-empty continuous subarray sums
        subarray_sums = []
        for i in range(n):
            current_sum = 0
            for j in range(i, n):
                current_sum += nums[j]
                subarray_sums.append(current_sum)
        
        # Step 2: Sort these sums in non-decreasing order
        subarray_sums.sort()
        
        # Step 3: Calculate the sum from index left to right
        result_sum = sum(subarray_sums[left-1:right]) % MOD
        
        # Step 4: Return the result modulo 10^9 + 7
        return result_sum

# Example usage:
solution = Solution()
print(solution.rangeSum([1,2,3,4], 4, 1, 5))  # Output: 13
print(solution.rangeSum([1,2,3,4], 4, 3, 4))  # Output: 6
print(solution.rangeSum([1,2,3,4], 4, 1, 10)) # Output: 50
```

This code correctly solves the problem by following the outlined steps and ensures that the result is within the required limits.