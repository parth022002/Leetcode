3.Longest Substring without Repeating the Characters
Solution:

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s) == 0:
            return 0

        max_length = 0
        left = 0
        seen = {}

        for right in range(len(s)):
            if s[right] in seen and seen[s[right]] >= left:
                left = seen[s[right]] + 1

            seen[s[right]] = right
            max_length = max(max_length, right - left + 1)

        return max_length


Explanation:

Sure, let's break down the provided Python code step by step:

```python
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s) == 0:
            return 0
        
        max_length = 0
        left = 0
        seen = {}
        
        for right in range(len(s)):
            if s[right] in seen and seen[s[right]] >= left:
                left = seen[s[right]] + 1
            
            seen[s[right]] = right
            max_length = max(max_length, right - left + 1)
        
        return max_length
```

### Explanation:

1. **Initialization**:
   - `max_length`: This variable stores the maximum length of the substring without repeating characters found so far.
   - `left`: This variable marks the left boundary of the current substring without repeating characters.
   - `seen`: This dictionary (or hashmap) keeps track of the most recent index of each character encountered in the string `s`.

2. **Iterating through the String**:
   - The `for` loop iterates through each character in the string `s`, with the `right` pointer iterating from 0 to `len(s)-1`.
   
3. **Checking for Repeating Characters**:
   - Inside the loop, the condition `if s[right] in seen and seen[s[right]] >= left` checks if the current character `s[right]` has been seen before (`s[right] in seen`) and if its last seen index (`seen[s[right]]`) is within the current window defined by `left` and `right`.
   - If true, it means `s[right]` is repeating within the current substring. Therefore, we adjust the `left` pointer to `seen[s[right]] + 1` to exclude the previous occurrence of `s[right]` and maintain a substring without repeating characters.

4. **Updating `seen` and `max_length`**:
   - Regardless of whether `s[right]` is seen before or not, update `seen[s[right]] = right` to record the most recent index of `s[right]`.
   - Update `max_length` using `max(max_length, right - left + 1)` to ensure it always holds the length of the longest substring without repeating characters encountered so far.

5. **Returning the Result**:
   - After iterating through the string, `max_length` contains the length of the longest substring without repeating characters, which is returned as the result of the function.

### Example Walkthrough:
For a string `s = "abcabcbb"`:
- Iteration starts with `right = 0`, `left = 0`, `seen = {}`, and `max_length = 0`.
- As `right` moves from 0 to 7:
  - At `right = 0`, `'a'` is seen first, so `seen = {'a': 0}`, `max_length = max(0, 1) = 1`.
  - At `right = 1`, `'b'` is seen, so `seen = {'a': 0, 'b': 1}`, `max_length = max(1, 2) = 2`.
  - At `right = 2`, `'c'` is seen, so `seen = {'a': 0, 'b': 1, 'c': 2}`, `max_length = max(2, 3) = 3`.
  - At `right = 3`, `'a'` is already seen at index 0, so update `left = 1` to exclude `'a'` from the current substring, `seen = {'a': 3, 'b': 1, 'c': 2}`, `max_length` remains 3.
  - Proceed similarly for the rest of the string.

### Complexity Analysis:
- **Time Complexity**: The algorithm runs in O(n) time complexity, where n is the length of the string `s`. Each character in `s` is processed at most twice (once by `right` and once by adjusting `left`), resulting in linear time complexity.
  
- **Space Complexity**: The space complexity is O(min(m, n)), where m is the size of the character set (constant for ASCII characters) and n is the length of the string `s`. The space used by `seen` hashmap is bounded by the number of distinct characters in `s`.

This approach efficiently finds the length of the longest substring without repeating characters using the sliding window technique combined with a hashmap for efficient character lookup and tracking.