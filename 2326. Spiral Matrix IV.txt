2326. Spiral Matrix IV
Solution:

class Solution:
    def spiralMatrix(self, m: int, n: int, head: Optional[ListNode]) -> List[List[int]]:
        # Initialize the matrix with -1
        matrix = [[-1] * n for _ in range(m)]
        
        # Early exit if the head is None
        if head is None:
            return matrix
        
        # Define boundaries
        top, left, bottom, right = 0, 0, m - 1, n - 1
        
        # Fill the matrix in a spiral order
        while top <= bottom and left <= right:
            # Move from left to right across the top row
            for i in range(left, right + 1):
                if not head:
                    return matrix
                matrix[top][i] = head.val
                head = head.next
            top += 1
            
            # Move from top to bottom down the right column
            for i in range(top, bottom + 1):
                if not head:
                    return matrix
                matrix[i][right] = head.val
                head = head.next
            right -= 1
            
            # Move from right to left across the bottom row (if applicable)
            if top <= bottom:
                for i in range(right, left - 1, -1):
                    if not head:
                        return matrix
                    matrix[bottom][i] = head.val
                    head = head.next
                bottom -= 1
            
            # Move from bottom to top up the left column (if applicable)
            if left <= right:
                for i in range(bottom, top - 1, -1):
                    if not head:
                        return matrix
                    matrix[i][left] = head.val
                    head = head.next
                left += 1
        
        return matrix

Explanation:

This code solves the problem of populating a 2D matrix in spiral order using values from a singly linked list. The matrix has dimensions `m x n` and initially contains `-1` in every cell. As the linked list is traversed, values from the list are inserted into the matrix in spiral order (moving right, down, left, and up in a continuous loop).

### Step-by-Step Explanation:

1. **Matrix Initialization:**
   ```python
   matrix = [[-1] * n for _ in range(m)]
   ```
   - A 2D list `matrix` with `m` rows and `n` columns is created, where each element is initialized to `-1`. This ensures that any cells that aren't filled with values from the linked list will remain `-1`.

2. **Early Exit if the Linked List is Empty:**
   ```python
   if head is None:
       return matrix
   ```
   - If the linked list is empty (`head` is `None`), the function immediately returns the matrix filled with `-1`.

3. **Defining Boundaries:**
   ```python
   top, left, bottom, right = 0, 0, m - 1, n - 1
   ```
   - Four variables (`top`, `left`, `bottom`, and `right`) define the current boundaries of the unfilled portion of the matrix. These boundaries are used to traverse the matrix in a spiral order.

4. **Filling the Matrix in Spiral Order:**
   The algorithm proceeds through four main directions (right, down, left, and up) until all the cells are filled or the linked list is exhausted.

   - **Move Left to Right Along the Top Row:**
     ```python
     for i in range(left, right + 1):
         if not head:
             return matrix
         matrix[top][i] = head.val
         head = head.next
     top += 1
     ```
     - This loop fills the top row from the current `left` to the current `right` boundary. After filling, `top` is incremented, moving the top boundary down.

   - **Move Top to Bottom Along the Right Column:**
     ```python
     for i in range(top, bottom + 1):
         if not head:
             return matrix
         matrix[i][right] = head.val
         head = head.next
     right -= 1
     ```
     - The loop fills the right column from the current `top` to the current `bottom` boundary. After filling, `right` is decremented, moving the right boundary inward.

   - **Move Right to Left Along the Bottom Row (If Applicable):**
     ```python
     if top <= bottom:
         for i in range(right, left - 1, -1):
             if not head:
                 return matrix
             matrix[bottom][i] = head.val
             head = head.next
         bottom -= 1
     ```
     - This loop fills the bottom row from the current `right` to the current `left` boundary, moving right to left. After filling, `bottom` is decremented, moving the bottom boundary upward.
     - The `if top <= bottom` condition ensures that the loop only executes if the `top` boundary hasn't crossed over the `bottom`.

   - **Move Bottom to Top Along the Left Column (If Applicable):**
     ```python
     if left <= right:
         for i in range(bottom, top - 1, -1):
             if not head:
                 return matrix
             matrix[i][left] = head.val
             head = head.next
         left += 1
     ```
     - This loop fills the left column from the current `bottom` to the current `top` boundary, moving bottom to top. After filling, `left` is incremented, moving the left boundary inward.
     - The `if left <= right` condition ensures that the loop only executes if the `left` boundary hasn't crossed over the `right`.

5. **Termination Condition:**
   - The loop continues until either the matrix is completely filled or the linked list is exhausted (when `head` becomes `None`).
   - If the linked list ends before the matrix is fully populated, the remaining cells will retain their initial `-1` values.

6. **Return the Final Matrix:**
   ```python
   return matrix
   ```
   - The function returns the final `matrix` after it has been filled in a spiral order with values from the linked list.

### Example:

Suppose the linked list contains values: `1 -> 2 -> 3 -> 4 -> 5 -> 6 -> None`, and the matrix dimensions are `m = 3` and `n = 3`.

The resulting matrix will be:

```
1  2  3
8  -1  4
7  6  5
```

This matrix is filled in spiral order with the linked list values, and the remaining cell is `-1` because the linked list ran out of values before filling the entire matrix.