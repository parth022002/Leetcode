1325.Delete Leaves With a Given Value
Explanation:

The `removeLeafNodes` function is designed to remove leaf nodes from a binary tree if their value matches a specified target. Let's go through the code step-by-step to understand how it works:

### Problem Description:
- You are given a binary tree where each node has an integer value.
- You need to remove all leaf nodes (nodes with no children) that have a value equal to a given target value.
- The function should return the modified tree.

### Approach:
The approach uses a post-order depth-first search (DFS) traversal to ensure that child nodes are processed before their parents. This way, we can safely determine if a node is a leaf after potentially removing its children.

### Code Explanation:
```python
class Solution:
    def removeLeafNodes(self, root: Optional[TreeNode], target: int) -> Optional[TreeNode]:
        if not root:
            return None
        
        # Recursively remove target leaves from the left and right subtrees.
        root.left = self.removeLeafNodes(root.left, target)
        root.right = self.removeLeafNodes(root.right, target)
        
        # If the current node is a leaf and its value is equal to target, remove it.
        if not root.left and not root.right and root.val == target:
            return None
        
        return root
```

### Detailed Steps:
1. **Base Case:**
   - If the `root` is `None` (i.e., the tree is empty or we've reached the end of a branch), return `None`.

2. **Recursive Calls:**
   - Recursively call `removeLeafNodes` on the left child:
     ```python
     root.left = self.removeLeafNodes(root.left, target)
     ```
   - Recursively call `removeLeafNodes` on the right child:
     ```python
     root.right = self.removeLeafNodes(root.right, target)
     ```

3. **Check if Current Node is a Target Leaf:**
   - After processing the children, check if the current node is a leaf (i.e., it has no left or right children) and its value equals the target:
     ```python
     if not root.left and not root.right and root.val == target:
         return None
     ```

4. **Return Current Node:**
   - If the current node is not a target leaf, return the node itself:
     ```python
     return root
     ```

### Example:
Consider the binary tree:
```
      1
     / \
    2   3
   /   / \
  2   2   4
 /         \
2           2
```
and the target value `2`.

1. Starting from the leaves, remove nodes with value `2`:
   - The leftmost leaf `2` is removed.
   - The rightmost leaf `2` under `4` is removed.
2. Moving up, the parent nodes become leaves:
   - The node `2` (which was the parent of the removed leaf `2`) becomes a leaf and is removed.
   - The same process applies to other nodes with value `2`.
3. After all removals, the resulting tree is:
```
      1
       \
        3
         \
          4
```

### Conclusion:
This approach ensures that leaf nodes with the target value are removed from the binary tree. By using a post-order DFS traversal, we process child nodes before their parents, making it straightforward to identify and remove target leaves. The recursive structure ensures that all nodes are checked, and only those that meet the criteria (being a leaf and having the target value) are removed.

Solution:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def removeLeafNodes(self, root: Optional[TreeNode], target: int) -> Optional[TreeNode]:
        if not root:
            return None
        root.left = self.removeLeafNodes(root.left, target)
        root.right = self.removeLeafNodes(root.right, target)
        if not root.left and not root.right and root.val == target:
            return None
        return root