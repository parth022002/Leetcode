2807. Insert Greatest Common Divisors in Linked List
Solution:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def insertGreatestCommonDivisors(self, head: Optional[ListNode]) -> Optional[ListNode]:
        curr = head
        while curr and curr.next:
            gcd_val = math.gcd(curr.val, curr.next.val)
            gcd_node = ListNode(gcd_val)  # Create new node with the GCD
            gcd_node.next = curr.next     # Point new node to the next node
            curr.next = gcd_node          # Insert GCD node after current
            curr = gcd_node.next          # Move to the next pair
        return head
        

Explanation:

Let's break down the logic of the `insertGreatestCommonDivisors` function step by step:

### Problem:
You are given a singly linked list. The goal is to insert a new node with the value of the greatest common divisor (GCD) of each pair of consecutive nodes' values between every two adjacent nodes.

### Explanation of Code:

1. **Input Linked List Structure**:
    - A singly linked list is represented by nodes of the form:
      ```python
      class ListNode:
          def __init__(self, val=0, next=None):
              self.val = val      # Node's value
              self.next = next    # Pointer to the next node
      ```
    - The list could be like: `1 -> 2 -> 3 -> 4`.

2. **GCD Calculation**:
    - The GCD of two integers is the largest integer that divides both numbers without leaving a remainder. For example, the GCD of 8 and 12 is 4, and the GCD of 3 and 7 is 1.

3. **Steps**:

    - Start from the **head** of the linked list and traverse through each pair of consecutive nodes.
    - For every pair of nodes, calculate the GCD of the current node’s value and the next node’s value.
    - Insert a new node (called `gcd_node`) that stores this GCD value between the current node and the next node.
    - Continue this process until the end of the list is reached.

4. **Code Walkthrough**:

    ```python
    class Solution:
        def insertGreatestCommonDivisors(self, head: Optional[ListNode]) -> Optional[ListNode]:
            curr = head
    ```
    - We start by setting the pointer `curr` to the head of the list. This pointer is used to traverse through the list.

    ```python
            while curr and curr.next:
    ```
    - This `while` loop ensures that we have both a current node (`curr`) and a next node (`curr.next`) to calculate the GCD between.

    ```python
                gcd_val = math.gcd(curr.val, curr.next.val)
    ```
    - The GCD of the current node's value (`curr.val`) and the next node's value (`curr.next.val`) is calculated using Python's built-in `math.gcd` function, and the result is stored in `gcd_val`.

    ```python
                gcd_node = ListNode(gcd_val)
    ```
    - A new node (`gcd_node`) is created with the GCD value as its data.

    ```python
                gcd_node.next = curr.next
                curr.next = gcd_node
    ```
    - The new `gcd_node` is inserted between the current node (`curr`) and the next node (`curr.next`). First, we set `gcd_node.next` to point to the next node (`curr.next`), then we update `curr.next` to point to the `gcd_node`, effectively placing it in the correct position in the list.

    ```python
                curr = gcd_node.next
    ```
    - After the new node has been inserted, move the pointer `curr` to the node after the newly inserted GCD node (`gcd_node.next`), so we can process the next pair of nodes.

5. **Return**:
    ```python
            return head
    ```
    - Once the loop has finished processing all pairs of nodes in the linked list, return the modified `head` of the list.

### Example:

- **Initial List**: `8 -> 12 -> 16`
- **Steps**:
  1. The GCD of `8` and `12` is `4`, so we insert a node with the value `4` between `8` and `12`:  
     `8 -> 4 -> 12 -> 16`
  2. The GCD of `12` and `16` is `4`, so we insert another node with the value `4` between `12` and `16`:  
     `8 -> 4 -> 12 -> 4 -> 16`

- **Final List**: `8 -> 4 -> 12 -> 4 -> 16`

### Complexity:
- **Time Complexity**: \( O(n \log (\min(a, b))) \) where \( n \) is the number of nodes and \( \log(\min(a, b)) \) comes from the GCD calculation.
- **Space Complexity**: \( O(n) \), as each node creates a new GCD node (which is still proportional to the number of original nodes).