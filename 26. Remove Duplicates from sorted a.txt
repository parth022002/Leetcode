26. Remove Duplicates from sorted array
Explaination:

This Python code defines a class `Solution` with a method `removeDuplicates` that removes duplicates from a sorted list `nums` in-place and returns the length of the resulting array without duplicates.

Here's how the code works:

1. It initializes a variable `l` to 1. This variable represents the index where the next non-duplicate element should be placed in the array.

2. It iterates over the array `nums` starting from index 1 using a for loop with the iterator `r`.
   
   - Inside the loop, it checks if the current element `nums[r]` is different from the previous element `nums[r - 1]`. If it is, then it's a non-duplicate element.
   
     - It assigns the non-duplicate element `nums[r]` to the position `nums[l]` in the array.
   
     - It increments the variable `l` to move to the next position where the next non-duplicate element should be placed.

3. After iterating through the entire array, the value of `l` represents the length of the resulting array without duplicates.

4. Finally, it returns the value of `l`, which is the length of the resulting array without duplicates.

This code efficiently removes duplicates from a sorted array in-place using two pointers (`l` and `r`). The time complexity of this algorithm is O(n), where n is the length of the input array `nums`, as it iterates through the array once to remove duplicates. The space complexity is O(1) as it performs the operation in-place without using any extra space.

Solution:

class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        l = 1
         
        for r in range (1, len(nums)):
            if nums[r] != nums[r - 1]:
                nums[l] = nums[r]
                l += 1
        return l